let chartInstance = null;function fetchResults() {  const username = document.getElementById('username').value.toLowerCase();  const year = document.getElementById('year').value;  let month = document.getElementById('month').value;  if (!username || !year || !month) {    alert('Preencha todos os campos');    return;  }  month = month.toString().padStart(2, '0');  fetch(`https://api.chess.com/pub/player/${username}/games/${year}/${month}`)    .then(response => {      if (!response.ok) throw new Error('Dados não encontrados');      return response.json();    })    .then(data => {      if (!data.games || data.games.length === 0) {        document.getElementById('result').innerText = 'Nenhuma partida encontrada.';        if (chartInstance) chartInstance.destroy();        return;      }      let wins = 0, losses = 0, draws = 0;      const ecoCount = {};      data.games.forEach(game => {        const userWhite = game.white.username.toLowerCase() === username;        const userBlack = game.black.username.toLowerCase() === username;        if (!userWhite && !userBlack) return;        const result = userWhite ? game.white.result : game.black.result;        if (result === 'win') wins++;        else if (['stalemate', 'agreed', 'repetition', 'timevsinsufficient'].includes(result)) draws++;        else losses++;        const eco1 = game.eco || 'Desconhecido';        // extrair nome após '/openings/'        const idx = eco1.indexOf('/openings/');        let ecoName = eco1;        if (idx !== -1) {          ecoName = eco1.substring(idx + '/openings/'.length);        }        ecoCount[ecoName] = (ecoCount[ecoName] || 0) + 1;      });      const totalGames = wins + losses + draws;      const sortedEco = Object.entries(ecoCount).sort((a, b) => b[1] - a[1]);      // Mostrar resultados em texto      let html = `<p>Vitórias: ${wins}</p><p>Derrotas: ${losses}</p><p>Empates: ${draws}</p>`;      html += '<h3>Aberturas jogadas (top 10 ordenadas por frequência com %):</h3><ul>';      const top10 = sortedEco.slice(0, 10);      top10.forEach(([eco, count]) => {        const percent = ((count / totalGames) * 100).toFixed(2);        html += `<li>${eco} - ${count} partidas (${percent}%)</li>`;      });      html += '</ul>';      document.getElementById('result').innerHTML = html;      // Preparar dados para gráfico      const labels = top10.map(item => item[0]);      const values = top10.map(item => item[1]);      if (chartInstance) chartInstance.destroy();      const ctx = document.getElementById('ecoChart').getContext('2d');      chartInstance = new Chart(ctx, {        type: 'bar',        data: {          labels: labels,          datasets: [{            label: 'Quantidade',            data: values,            backgroundColor: 'rgba(54, 162, 235, 0.6)',            borderColor: 'rgba(54, 162, 235, 1)',            borderWidth: 1          }]        },        options: {          indexAxis: 'y',          scales: {            x: {              beginAtZero: true            }          },          responsive: true,          plugins: {            legend: { display: false },            tooltip: {              callbacks: {                label: function (context) {                  return context.parsed.x;                }              }            }          }        }      });    })    .catch(error => {      document.getElementById('result').innerText = error.message;      if (chartInstance) chartInstance.destroy();    });}